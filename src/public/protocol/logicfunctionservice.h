/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LogicFunctionService_H
#define LogicFunctionService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "iot_protocol_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class LogicFunctionServiceIf {
 public:
  virtual ~LogicFunctionServiceIf() {}
  virtual int32_t raiseSignal(const eIOTSignalType::type type) = 0;
  virtual void getAllowSites(std::map<std::string, eIOTNodeType::type> & _return) = 0;
  virtual int32_t addSite(const std::string& phyAddr, const eIOTNodeType::type type) = 0;
  virtual int32_t delSite(const std::string& phyAddr) = 0;
  virtual int32_t delDevice(const std::string& phyAddr) = 0;
  virtual int32_t getNetworkStatus() = 0;
  virtual int32_t operateNetwork(const bool isOpen) = 0;
  virtual int32_t rebuildNetwork() = 0;
};

class LogicFunctionServiceIfFactory {
 public:
  typedef LogicFunctionServiceIf Handler;

  virtual ~LogicFunctionServiceIfFactory() {}

  virtual LogicFunctionServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LogicFunctionServiceIf* /* handler */) = 0;
};

class LogicFunctionServiceIfSingletonFactory : virtual public LogicFunctionServiceIfFactory {
 public:
  LogicFunctionServiceIfSingletonFactory(const boost::shared_ptr<LogicFunctionServiceIf>& iface) : iface_(iface) {}
  virtual ~LogicFunctionServiceIfSingletonFactory() {}

  virtual LogicFunctionServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(LogicFunctionServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<LogicFunctionServiceIf> iface_;
};

class LogicFunctionServiceNull : virtual public LogicFunctionServiceIf {
 public:
  virtual ~LogicFunctionServiceNull() {}
  int32_t raiseSignal(const eIOTSignalType::type /* type */) {
    int32_t _return = 0;
    return _return;
  }
  void getAllowSites(std::map<std::string, eIOTNodeType::type> & /* _return */) {
    return;
  }
  int32_t addSite(const std::string& /* phyAddr */, const eIOTNodeType::type /* type */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t delSite(const std::string& /* phyAddr */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t delDevice(const std::string& /* phyAddr */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t getNetworkStatus() {
    int32_t _return = 0;
    return _return;
  }
  int32_t operateNetwork(const bool /* isOpen */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t rebuildNetwork() {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _LogicFunctionService_raiseSignal_args__isset {
  _LogicFunctionService_raiseSignal_args__isset() : type(false) {}
  bool type :1;
} _LogicFunctionService_raiseSignal_args__isset;

class LogicFunctionService_raiseSignal_args {
 public:

  LogicFunctionService_raiseSignal_args(const LogicFunctionService_raiseSignal_args&);
  LogicFunctionService_raiseSignal_args& operator=(const LogicFunctionService_raiseSignal_args&);
  LogicFunctionService_raiseSignal_args() : type((eIOTSignalType::type)0) {
  }

  virtual ~LogicFunctionService_raiseSignal_args() throw();
  eIOTSignalType::type type;

  _LogicFunctionService_raiseSignal_args__isset __isset;

  void __set_type(const eIOTSignalType::type val);

  bool operator == (const LogicFunctionService_raiseSignal_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const LogicFunctionService_raiseSignal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicFunctionService_raiseSignal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicFunctionService_raiseSignal_pargs {
 public:


  virtual ~LogicFunctionService_raiseSignal_pargs() throw();
  const eIOTSignalType::type* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogicFunctionService_raiseSignal_result__isset {
  _LogicFunctionService_raiseSignal_result__isset() : success(false) {}
  bool success :1;
} _LogicFunctionService_raiseSignal_result__isset;

class LogicFunctionService_raiseSignal_result {
 public:

  LogicFunctionService_raiseSignal_result(const LogicFunctionService_raiseSignal_result&);
  LogicFunctionService_raiseSignal_result& operator=(const LogicFunctionService_raiseSignal_result&);
  LogicFunctionService_raiseSignal_result() : success(0) {
  }

  virtual ~LogicFunctionService_raiseSignal_result() throw();
  int32_t success;

  _LogicFunctionService_raiseSignal_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const LogicFunctionService_raiseSignal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LogicFunctionService_raiseSignal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicFunctionService_raiseSignal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogicFunctionService_raiseSignal_presult__isset {
  _LogicFunctionService_raiseSignal_presult__isset() : success(false) {}
  bool success :1;
} _LogicFunctionService_raiseSignal_presult__isset;

class LogicFunctionService_raiseSignal_presult {
 public:


  virtual ~LogicFunctionService_raiseSignal_presult() throw();
  int32_t* success;

  _LogicFunctionService_raiseSignal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LogicFunctionService_getAllowSites_args {
 public:

  LogicFunctionService_getAllowSites_args(const LogicFunctionService_getAllowSites_args&);
  LogicFunctionService_getAllowSites_args& operator=(const LogicFunctionService_getAllowSites_args&);
  LogicFunctionService_getAllowSites_args() {
  }

  virtual ~LogicFunctionService_getAllowSites_args() throw();

  bool operator == (const LogicFunctionService_getAllowSites_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LogicFunctionService_getAllowSites_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicFunctionService_getAllowSites_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicFunctionService_getAllowSites_pargs {
 public:


  virtual ~LogicFunctionService_getAllowSites_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogicFunctionService_getAllowSites_result__isset {
  _LogicFunctionService_getAllowSites_result__isset() : success(false) {}
  bool success :1;
} _LogicFunctionService_getAllowSites_result__isset;

class LogicFunctionService_getAllowSites_result {
 public:

  LogicFunctionService_getAllowSites_result(const LogicFunctionService_getAllowSites_result&);
  LogicFunctionService_getAllowSites_result& operator=(const LogicFunctionService_getAllowSites_result&);
  LogicFunctionService_getAllowSites_result() {
  }

  virtual ~LogicFunctionService_getAllowSites_result() throw();
  std::map<std::string, eIOTNodeType::type>  success;

  _LogicFunctionService_getAllowSites_result__isset __isset;

  void __set_success(const std::map<std::string, eIOTNodeType::type> & val);

  bool operator == (const LogicFunctionService_getAllowSites_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LogicFunctionService_getAllowSites_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicFunctionService_getAllowSites_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogicFunctionService_getAllowSites_presult__isset {
  _LogicFunctionService_getAllowSites_presult__isset() : success(false) {}
  bool success :1;
} _LogicFunctionService_getAllowSites_presult__isset;

class LogicFunctionService_getAllowSites_presult {
 public:


  virtual ~LogicFunctionService_getAllowSites_presult() throw();
  std::map<std::string, eIOTNodeType::type> * success;

  _LogicFunctionService_getAllowSites_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LogicFunctionService_addSite_args__isset {
  _LogicFunctionService_addSite_args__isset() : phyAddr(false), type(false) {}
  bool phyAddr :1;
  bool type :1;
} _LogicFunctionService_addSite_args__isset;

class LogicFunctionService_addSite_args {
 public:

  LogicFunctionService_addSite_args(const LogicFunctionService_addSite_args&);
  LogicFunctionService_addSite_args& operator=(const LogicFunctionService_addSite_args&);
  LogicFunctionService_addSite_args() : phyAddr(), type((eIOTNodeType::type)0) {
  }

  virtual ~LogicFunctionService_addSite_args() throw();
  std::string phyAddr;
  eIOTNodeType::type type;

  _LogicFunctionService_addSite_args__isset __isset;

  void __set_phyAddr(const std::string& val);

  void __set_type(const eIOTNodeType::type val);

  bool operator == (const LogicFunctionService_addSite_args & rhs) const
  {
    if (!(phyAddr == rhs.phyAddr))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const LogicFunctionService_addSite_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicFunctionService_addSite_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicFunctionService_addSite_pargs {
 public:


  virtual ~LogicFunctionService_addSite_pargs() throw();
  const std::string* phyAddr;
  const eIOTNodeType::type* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogicFunctionService_addSite_result__isset {
  _LogicFunctionService_addSite_result__isset() : success(false) {}
  bool success :1;
} _LogicFunctionService_addSite_result__isset;

class LogicFunctionService_addSite_result {
 public:

  LogicFunctionService_addSite_result(const LogicFunctionService_addSite_result&);
  LogicFunctionService_addSite_result& operator=(const LogicFunctionService_addSite_result&);
  LogicFunctionService_addSite_result() : success(0) {
  }

  virtual ~LogicFunctionService_addSite_result() throw();
  int32_t success;

  _LogicFunctionService_addSite_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const LogicFunctionService_addSite_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LogicFunctionService_addSite_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicFunctionService_addSite_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogicFunctionService_addSite_presult__isset {
  _LogicFunctionService_addSite_presult__isset() : success(false) {}
  bool success :1;
} _LogicFunctionService_addSite_presult__isset;

class LogicFunctionService_addSite_presult {
 public:


  virtual ~LogicFunctionService_addSite_presult() throw();
  int32_t* success;

  _LogicFunctionService_addSite_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LogicFunctionService_delSite_args__isset {
  _LogicFunctionService_delSite_args__isset() : phyAddr(false) {}
  bool phyAddr :1;
} _LogicFunctionService_delSite_args__isset;

class LogicFunctionService_delSite_args {
 public:

  LogicFunctionService_delSite_args(const LogicFunctionService_delSite_args&);
  LogicFunctionService_delSite_args& operator=(const LogicFunctionService_delSite_args&);
  LogicFunctionService_delSite_args() : phyAddr() {
  }

  virtual ~LogicFunctionService_delSite_args() throw();
  std::string phyAddr;

  _LogicFunctionService_delSite_args__isset __isset;

  void __set_phyAddr(const std::string& val);

  bool operator == (const LogicFunctionService_delSite_args & rhs) const
  {
    if (!(phyAddr == rhs.phyAddr))
      return false;
    return true;
  }
  bool operator != (const LogicFunctionService_delSite_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicFunctionService_delSite_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicFunctionService_delSite_pargs {
 public:


  virtual ~LogicFunctionService_delSite_pargs() throw();
  const std::string* phyAddr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogicFunctionService_delSite_result__isset {
  _LogicFunctionService_delSite_result__isset() : success(false) {}
  bool success :1;
} _LogicFunctionService_delSite_result__isset;

class LogicFunctionService_delSite_result {
 public:

  LogicFunctionService_delSite_result(const LogicFunctionService_delSite_result&);
  LogicFunctionService_delSite_result& operator=(const LogicFunctionService_delSite_result&);
  LogicFunctionService_delSite_result() : success(0) {
  }

  virtual ~LogicFunctionService_delSite_result() throw();
  int32_t success;

  _LogicFunctionService_delSite_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const LogicFunctionService_delSite_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LogicFunctionService_delSite_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicFunctionService_delSite_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogicFunctionService_delSite_presult__isset {
  _LogicFunctionService_delSite_presult__isset() : success(false) {}
  bool success :1;
} _LogicFunctionService_delSite_presult__isset;

class LogicFunctionService_delSite_presult {
 public:


  virtual ~LogicFunctionService_delSite_presult() throw();
  int32_t* success;

  _LogicFunctionService_delSite_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LogicFunctionService_delDevice_args__isset {
  _LogicFunctionService_delDevice_args__isset() : phyAddr(false) {}
  bool phyAddr :1;
} _LogicFunctionService_delDevice_args__isset;

class LogicFunctionService_delDevice_args {
 public:

  LogicFunctionService_delDevice_args(const LogicFunctionService_delDevice_args&);
  LogicFunctionService_delDevice_args& operator=(const LogicFunctionService_delDevice_args&);
  LogicFunctionService_delDevice_args() : phyAddr() {
  }

  virtual ~LogicFunctionService_delDevice_args() throw();
  std::string phyAddr;

  _LogicFunctionService_delDevice_args__isset __isset;

  void __set_phyAddr(const std::string& val);

  bool operator == (const LogicFunctionService_delDevice_args & rhs) const
  {
    if (!(phyAddr == rhs.phyAddr))
      return false;
    return true;
  }
  bool operator != (const LogicFunctionService_delDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicFunctionService_delDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicFunctionService_delDevice_pargs {
 public:


  virtual ~LogicFunctionService_delDevice_pargs() throw();
  const std::string* phyAddr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogicFunctionService_delDevice_result__isset {
  _LogicFunctionService_delDevice_result__isset() : success(false) {}
  bool success :1;
} _LogicFunctionService_delDevice_result__isset;

class LogicFunctionService_delDevice_result {
 public:

  LogicFunctionService_delDevice_result(const LogicFunctionService_delDevice_result&);
  LogicFunctionService_delDevice_result& operator=(const LogicFunctionService_delDevice_result&);
  LogicFunctionService_delDevice_result() : success(0) {
  }

  virtual ~LogicFunctionService_delDevice_result() throw();
  int32_t success;

  _LogicFunctionService_delDevice_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const LogicFunctionService_delDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LogicFunctionService_delDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicFunctionService_delDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogicFunctionService_delDevice_presult__isset {
  _LogicFunctionService_delDevice_presult__isset() : success(false) {}
  bool success :1;
} _LogicFunctionService_delDevice_presult__isset;

class LogicFunctionService_delDevice_presult {
 public:


  virtual ~LogicFunctionService_delDevice_presult() throw();
  int32_t* success;

  _LogicFunctionService_delDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LogicFunctionService_getNetworkStatus_args {
 public:

  LogicFunctionService_getNetworkStatus_args(const LogicFunctionService_getNetworkStatus_args&);
  LogicFunctionService_getNetworkStatus_args& operator=(const LogicFunctionService_getNetworkStatus_args&);
  LogicFunctionService_getNetworkStatus_args() {
  }

  virtual ~LogicFunctionService_getNetworkStatus_args() throw();

  bool operator == (const LogicFunctionService_getNetworkStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LogicFunctionService_getNetworkStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicFunctionService_getNetworkStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicFunctionService_getNetworkStatus_pargs {
 public:


  virtual ~LogicFunctionService_getNetworkStatus_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogicFunctionService_getNetworkStatus_result__isset {
  _LogicFunctionService_getNetworkStatus_result__isset() : success(false) {}
  bool success :1;
} _LogicFunctionService_getNetworkStatus_result__isset;

class LogicFunctionService_getNetworkStatus_result {
 public:

  LogicFunctionService_getNetworkStatus_result(const LogicFunctionService_getNetworkStatus_result&);
  LogicFunctionService_getNetworkStatus_result& operator=(const LogicFunctionService_getNetworkStatus_result&);
  LogicFunctionService_getNetworkStatus_result() : success(0) {
  }

  virtual ~LogicFunctionService_getNetworkStatus_result() throw();
  int32_t success;

  _LogicFunctionService_getNetworkStatus_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const LogicFunctionService_getNetworkStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LogicFunctionService_getNetworkStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicFunctionService_getNetworkStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogicFunctionService_getNetworkStatus_presult__isset {
  _LogicFunctionService_getNetworkStatus_presult__isset() : success(false) {}
  bool success :1;
} _LogicFunctionService_getNetworkStatus_presult__isset;

class LogicFunctionService_getNetworkStatus_presult {
 public:


  virtual ~LogicFunctionService_getNetworkStatus_presult() throw();
  int32_t* success;

  _LogicFunctionService_getNetworkStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LogicFunctionService_operateNetwork_args__isset {
  _LogicFunctionService_operateNetwork_args__isset() : isOpen(false) {}
  bool isOpen :1;
} _LogicFunctionService_operateNetwork_args__isset;

class LogicFunctionService_operateNetwork_args {
 public:

  LogicFunctionService_operateNetwork_args(const LogicFunctionService_operateNetwork_args&);
  LogicFunctionService_operateNetwork_args& operator=(const LogicFunctionService_operateNetwork_args&);
  LogicFunctionService_operateNetwork_args() : isOpen(0) {
  }

  virtual ~LogicFunctionService_operateNetwork_args() throw();
  bool isOpen;

  _LogicFunctionService_operateNetwork_args__isset __isset;

  void __set_isOpen(const bool val);

  bool operator == (const LogicFunctionService_operateNetwork_args & rhs) const
  {
    if (!(isOpen == rhs.isOpen))
      return false;
    return true;
  }
  bool operator != (const LogicFunctionService_operateNetwork_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicFunctionService_operateNetwork_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicFunctionService_operateNetwork_pargs {
 public:


  virtual ~LogicFunctionService_operateNetwork_pargs() throw();
  const bool* isOpen;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogicFunctionService_operateNetwork_result__isset {
  _LogicFunctionService_operateNetwork_result__isset() : success(false) {}
  bool success :1;
} _LogicFunctionService_operateNetwork_result__isset;

class LogicFunctionService_operateNetwork_result {
 public:

  LogicFunctionService_operateNetwork_result(const LogicFunctionService_operateNetwork_result&);
  LogicFunctionService_operateNetwork_result& operator=(const LogicFunctionService_operateNetwork_result&);
  LogicFunctionService_operateNetwork_result() : success(0) {
  }

  virtual ~LogicFunctionService_operateNetwork_result() throw();
  int32_t success;

  _LogicFunctionService_operateNetwork_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const LogicFunctionService_operateNetwork_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LogicFunctionService_operateNetwork_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicFunctionService_operateNetwork_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogicFunctionService_operateNetwork_presult__isset {
  _LogicFunctionService_operateNetwork_presult__isset() : success(false) {}
  bool success :1;
} _LogicFunctionService_operateNetwork_presult__isset;

class LogicFunctionService_operateNetwork_presult {
 public:


  virtual ~LogicFunctionService_operateNetwork_presult() throw();
  int32_t* success;

  _LogicFunctionService_operateNetwork_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LogicFunctionService_rebuildNetwork_args {
 public:

  LogicFunctionService_rebuildNetwork_args(const LogicFunctionService_rebuildNetwork_args&);
  LogicFunctionService_rebuildNetwork_args& operator=(const LogicFunctionService_rebuildNetwork_args&);
  LogicFunctionService_rebuildNetwork_args() {
  }

  virtual ~LogicFunctionService_rebuildNetwork_args() throw();

  bool operator == (const LogicFunctionService_rebuildNetwork_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LogicFunctionService_rebuildNetwork_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicFunctionService_rebuildNetwork_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogicFunctionService_rebuildNetwork_pargs {
 public:


  virtual ~LogicFunctionService_rebuildNetwork_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogicFunctionService_rebuildNetwork_result__isset {
  _LogicFunctionService_rebuildNetwork_result__isset() : success(false) {}
  bool success :1;
} _LogicFunctionService_rebuildNetwork_result__isset;

class LogicFunctionService_rebuildNetwork_result {
 public:

  LogicFunctionService_rebuildNetwork_result(const LogicFunctionService_rebuildNetwork_result&);
  LogicFunctionService_rebuildNetwork_result& operator=(const LogicFunctionService_rebuildNetwork_result&);
  LogicFunctionService_rebuildNetwork_result() : success(0) {
  }

  virtual ~LogicFunctionService_rebuildNetwork_result() throw();
  int32_t success;

  _LogicFunctionService_rebuildNetwork_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const LogicFunctionService_rebuildNetwork_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LogicFunctionService_rebuildNetwork_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogicFunctionService_rebuildNetwork_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogicFunctionService_rebuildNetwork_presult__isset {
  _LogicFunctionService_rebuildNetwork_presult__isset() : success(false) {}
  bool success :1;
} _LogicFunctionService_rebuildNetwork_presult__isset;

class LogicFunctionService_rebuildNetwork_presult {
 public:


  virtual ~LogicFunctionService_rebuildNetwork_presult() throw();
  int32_t* success;

  _LogicFunctionService_rebuildNetwork_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class LogicFunctionServiceClient : virtual public LogicFunctionServiceIf {
 public:
  LogicFunctionServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LogicFunctionServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t raiseSignal(const eIOTSignalType::type type);
  void send_raiseSignal(const eIOTSignalType::type type);
  int32_t recv_raiseSignal();
  void getAllowSites(std::map<std::string, eIOTNodeType::type> & _return);
  void send_getAllowSites();
  void recv_getAllowSites(std::map<std::string, eIOTNodeType::type> & _return);
  int32_t addSite(const std::string& phyAddr, const eIOTNodeType::type type);
  void send_addSite(const std::string& phyAddr, const eIOTNodeType::type type);
  int32_t recv_addSite();
  int32_t delSite(const std::string& phyAddr);
  void send_delSite(const std::string& phyAddr);
  int32_t recv_delSite();
  int32_t delDevice(const std::string& phyAddr);
  void send_delDevice(const std::string& phyAddr);
  int32_t recv_delDevice();
  int32_t getNetworkStatus();
  void send_getNetworkStatus();
  int32_t recv_getNetworkStatus();
  int32_t operateNetwork(const bool isOpen);
  void send_operateNetwork(const bool isOpen);
  int32_t recv_operateNetwork();
  int32_t rebuildNetwork();
  void send_rebuildNetwork();
  int32_t recv_rebuildNetwork();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LogicFunctionServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<LogicFunctionServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (LogicFunctionServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_raiseSignal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllowSites(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addSite(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delSite(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNetworkStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_operateNetwork(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rebuildNetwork(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LogicFunctionServiceProcessor(boost::shared_ptr<LogicFunctionServiceIf> iface) :
    iface_(iface) {
    processMap_["raiseSignal"] = &LogicFunctionServiceProcessor::process_raiseSignal;
    processMap_["getAllowSites"] = &LogicFunctionServiceProcessor::process_getAllowSites;
    processMap_["addSite"] = &LogicFunctionServiceProcessor::process_addSite;
    processMap_["delSite"] = &LogicFunctionServiceProcessor::process_delSite;
    processMap_["delDevice"] = &LogicFunctionServiceProcessor::process_delDevice;
    processMap_["getNetworkStatus"] = &LogicFunctionServiceProcessor::process_getNetworkStatus;
    processMap_["operateNetwork"] = &LogicFunctionServiceProcessor::process_operateNetwork;
    processMap_["rebuildNetwork"] = &LogicFunctionServiceProcessor::process_rebuildNetwork;
  }

  virtual ~LogicFunctionServiceProcessor() {}
};

class LogicFunctionServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LogicFunctionServiceProcessorFactory(const ::boost::shared_ptr< LogicFunctionServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< LogicFunctionServiceIfFactory > handlerFactory_;
};

class LogicFunctionServiceMultiface : virtual public LogicFunctionServiceIf {
 public:
  LogicFunctionServiceMultiface(std::vector<boost::shared_ptr<LogicFunctionServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LogicFunctionServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<LogicFunctionServiceIf> > ifaces_;
  LogicFunctionServiceMultiface() {}
  void add(boost::shared_ptr<LogicFunctionServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t raiseSignal(const eIOTSignalType::type type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->raiseSignal(type);
    }
    return ifaces_[i]->raiseSignal(type);
  }

  void getAllowSites(std::map<std::string, eIOTNodeType::type> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllowSites(_return);
    }
    ifaces_[i]->getAllowSites(_return);
    return;
  }

  int32_t addSite(const std::string& phyAddr, const eIOTNodeType::type type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addSite(phyAddr, type);
    }
    return ifaces_[i]->addSite(phyAddr, type);
  }

  int32_t delSite(const std::string& phyAddr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delSite(phyAddr);
    }
    return ifaces_[i]->delSite(phyAddr);
  }

  int32_t delDevice(const std::string& phyAddr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delDevice(phyAddr);
    }
    return ifaces_[i]->delDevice(phyAddr);
  }

  int32_t getNetworkStatus() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNetworkStatus();
    }
    return ifaces_[i]->getNetworkStatus();
  }

  int32_t operateNetwork(const bool isOpen) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->operateNetwork(isOpen);
    }
    return ifaces_[i]->operateNetwork(isOpen);
  }

  int32_t rebuildNetwork() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rebuildNetwork();
    }
    return ifaces_[i]->rebuildNetwork();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class LogicFunctionServiceConcurrentClient : virtual public LogicFunctionServiceIf {
 public:
  LogicFunctionServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LogicFunctionServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t raiseSignal(const eIOTSignalType::type type);
  int32_t send_raiseSignal(const eIOTSignalType::type type);
  int32_t recv_raiseSignal(const int32_t seqid);
  void getAllowSites(std::map<std::string, eIOTNodeType::type> & _return);
  int32_t send_getAllowSites();
  void recv_getAllowSites(std::map<std::string, eIOTNodeType::type> & _return, const int32_t seqid);
  int32_t addSite(const std::string& phyAddr, const eIOTNodeType::type type);
  int32_t send_addSite(const std::string& phyAddr, const eIOTNodeType::type type);
  int32_t recv_addSite(const int32_t seqid);
  int32_t delSite(const std::string& phyAddr);
  int32_t send_delSite(const std::string& phyAddr);
  int32_t recv_delSite(const int32_t seqid);
  int32_t delDevice(const std::string& phyAddr);
  int32_t send_delDevice(const std::string& phyAddr);
  int32_t recv_delDevice(const int32_t seqid);
  int32_t getNetworkStatus();
  int32_t send_getNetworkStatus();
  int32_t recv_getNetworkStatus(const int32_t seqid);
  int32_t operateNetwork(const bool isOpen);
  int32_t send_operateNetwork(const bool isOpen);
  int32_t recv_operateNetwork(const int32_t seqid);
  int32_t rebuildNetwork();
  int32_t send_rebuildNetwork();
  int32_t recv_rebuildNetwork(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
